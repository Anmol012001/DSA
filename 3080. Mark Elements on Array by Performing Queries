class Solution {
public:
    vector<long long> unmarkedSumArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        
        vector<bool> vis(n, false);
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        for (int i = 0; i < n; ++i) 
        {
            if (vis[i]==false) 
            {
                pq.push({nums[i], i});
            }
        }
        int j=0;
        long long sum=0;
        
        for(auto it:nums)
        {
            sum=sum+it;
        }
        
        vector<long long> ans;
        for (int i = 0; i < m; ++i) 
        {
            int k = queries[i][1];
            int ind = queries[i][0];
            
            if (vis[ind]==false) 
            {
                vis[ind] = true;
                sum=sum-nums[ind];
            }
            
            while (!pq.empty() && k>0) 
            {
                int value = pq .top().second;
                pq.pop();
                
                if (vis[value]==false) 
                {
                    vis[value] = true;
                    sum=sum-nums[value];
                    k=k-1;
                }
            }
            ans.push_back(sum);
        }
        
        return ans;

    }
};
